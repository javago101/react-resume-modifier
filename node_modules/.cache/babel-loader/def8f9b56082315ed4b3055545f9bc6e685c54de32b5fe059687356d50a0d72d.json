{"ast":null,"code":"import axios from 'axios';\nconst BASE_URL = 'http://127.0.0.1:5000/jobs';\nexport const fetchJobs = async (params = {}) => {\n  try {\n    const response = await axios.get(`${BASE_URL}/fetch_jobs`, {\n      params: {\n        query: params.query || 'developer',\n        location: params.location,\n        max_pages: params.max_pages || 1,\n        remote_only: params.remote_only,\n        min_salary: params.min_salary,\n        date_posted: params.date_posted\n      }\n    });\n    return response.data;\n  } catch (error) {\n    console.error('Error fetching jobs:', error);\n    throw error;\n  }\n};\n\n// Helper function to format salary range\nexport const formatSalary = salary => {\n  if (!salary) return 'Salary not specified';\n  return salary.replace('USD', '').trim();\n};\n\n// Helper function to format date\nexport const formatDate = dateString => {\n  if (!dateString) return '';\n  const date = new Date(dateString);\n  return date.toLocaleDateString('en-US', {\n    year: 'numeric',\n    month: 'short',\n    day: 'numeric'\n  });\n};","map":{"version":3,"names":["axios","BASE_URL","fetchJobs","params","response","get","query","location","max_pages","remote_only","min_salary","date_posted","data","error","console","formatSalary","salary","replace","trim","formatDate","dateString","date","Date","toLocaleDateString","year","month","day"],"sources":["/Users/guoqingwang/Dev/Web/react-resume-modifier/src/services/jobSearchService.js"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'http://127.0.0.1:5000/jobs';\n\nexport const fetchJobs = async (params = {}) => {\n    try {\n        const response = await axios.get(`${BASE_URL}/fetch_jobs`, {\n            params: {\n                query: params.query || 'developer',\n                location: params.location,\n                max_pages: params.max_pages || 1,\n                remote_only: params.remote_only,\n                min_salary: params.min_salary,\n                date_posted: params.date_posted\n            }\n        });\n        return response.data;\n    } catch (error) {\n        console.error('Error fetching jobs:', error);\n        throw error;\n    }\n};\n\n// Helper function to format salary range\nexport const formatSalary = (salary) => {\n    if (!salary) return 'Salary not specified';\n    return salary.replace('USD', '').trim();\n};\n\n// Helper function to format date\nexport const formatDate = (dateString) => {\n    if (!dateString) return '';\n    const date = new Date(dateString);\n    return date.toLocaleDateString('en-US', {\n        year: 'numeric',\n        month: 'short',\n        day: 'numeric'\n    });\n}; "],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,QAAQ,GAAG,4BAA4B;AAE7C,OAAO,MAAMC,SAAS,GAAG,MAAAA,CAAOC,MAAM,GAAG,CAAC,CAAC,KAAK;EAC5C,IAAI;IACA,MAAMC,QAAQ,GAAG,MAAMJ,KAAK,CAACK,GAAG,CAAC,GAAGJ,QAAQ,aAAa,EAAE;MACvDE,MAAM,EAAE;QACJG,KAAK,EAAEH,MAAM,CAACG,KAAK,IAAI,WAAW;QAClCC,QAAQ,EAAEJ,MAAM,CAACI,QAAQ;QACzBC,SAAS,EAAEL,MAAM,CAACK,SAAS,IAAI,CAAC;QAChCC,WAAW,EAAEN,MAAM,CAACM,WAAW;QAC/BC,UAAU,EAAEP,MAAM,CAACO,UAAU;QAC7BC,WAAW,EAAER,MAAM,CAACQ;MACxB;IACJ,CAAC,CAAC;IACF,OAAOP,QAAQ,CAACQ,IAAI;EACxB,CAAC,CAAC,OAAOC,KAAK,EAAE;IACZC,OAAO,CAACD,KAAK,CAAC,sBAAsB,EAAEA,KAAK,CAAC;IAC5C,MAAMA,KAAK;EACf;AACJ,CAAC;;AAED;AACA,OAAO,MAAME,YAAY,GAAIC,MAAM,IAAK;EACpC,IAAI,CAACA,MAAM,EAAE,OAAO,sBAAsB;EAC1C,OAAOA,MAAM,CAACC,OAAO,CAAC,KAAK,EAAE,EAAE,CAAC,CAACC,IAAI,CAAC,CAAC;AAC3C,CAAC;;AAED;AACA,OAAO,MAAMC,UAAU,GAAIC,UAAU,IAAK;EACtC,IAAI,CAACA,UAAU,EAAE,OAAO,EAAE;EAC1B,MAAMC,IAAI,GAAG,IAAIC,IAAI,CAACF,UAAU,CAAC;EACjC,OAAOC,IAAI,CAACE,kBAAkB,CAAC,OAAO,EAAE;IACpCC,IAAI,EAAE,SAAS;IACfC,KAAK,EAAE,OAAO;IACdC,GAAG,EAAE;EACT,CAAC,CAAC;AACN,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}