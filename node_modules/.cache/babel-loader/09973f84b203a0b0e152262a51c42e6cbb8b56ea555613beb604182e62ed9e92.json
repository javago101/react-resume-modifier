{"ast":null,"code":"var _jsxFileName = \"/Users/guoqingwang/Dev/Web/react-resume-modifier/src/context/AuthContext.js\",\n  _s = $RefreshSig$(),\n  _s2 = $RefreshSig$();\nimport React, { createContext, useState, useContext } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst AuthContext = /*#__PURE__*/createContext(null);\nexport const AuthProvider = ({\n  children\n}) => {\n  _s();\n  const [user, setUser] = useState(null);\n  const [loading, setLoading] = useState(false);\n  const [error, setError] = useState(null);\n  const signIn = async (email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Replace with actual API call\n      const mockUser = {\n        id: 1,\n        name: 'Demo User',\n        email\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signUp = async (name, email, password) => {\n    try {\n      setLoading(true);\n      setError(null);\n      // TODO: Replace with actual API call\n      const mockUser = {\n        id: 1,\n        name,\n        email\n      };\n      setUser(mockUser);\n      localStorage.setItem('user', JSON.stringify(mockUser));\n    } catch (err) {\n      setError(err.message);\n      throw err;\n    } finally {\n      setLoading(false);\n    }\n  };\n  const signOut = () => {\n    setUser(null);\n    localStorage.removeItem('user');\n  };\n\n  // Auto sign in demo user on mount\n  React.useEffect(() => {\n    const storedUser = localStorage.getItem('user');\n    if (storedUser) {\n      setUser(JSON.parse(storedUser));\n    } else {\n      // Create a demo user automatically\n      const demoUser = {\n        id: 1,\n        name: 'Demo User',\n        email: 'demo@example.com'\n      };\n      setUser(demoUser);\n      localStorage.setItem('user', JSON.stringify(demoUser));\n    }\n  }, []);\n  const value = {\n    user,\n    loading,\n    error,\n    signIn,\n    signUp,\n    signOut\n  };\n  return /*#__PURE__*/_jsxDEV(AuthContext.Provider, {\n    value: value,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 69,\n    columnNumber: 12\n  }, this);\n};\n_s(AuthProvider, \"FOpntwB10H5hCfVzE7D/PZlVbdo=\");\n_c = AuthProvider;\nexport const useAuth = () => {\n  _s2();\n  const context = useContext(AuthContext);\n  if (!context) {\n    throw new Error('useAuth must be used within an AuthProvider');\n  }\n  return context;\n};\n_s2(useAuth, \"b9L3QQ+jgeyIrH0NfHrJ8nn7VMU=\");\nexport default AuthContext;\nvar _c;\n$RefreshReg$(_c, \"AuthProvider\");","map":{"version":3,"names":["React","createContext","useState","useContext","jsxDEV","_jsxDEV","AuthContext","AuthProvider","children","_s","user","setUser","loading","setLoading","error","setError","signIn","email","password","mockUser","id","name","localStorage","setItem","JSON","stringify","err","message","signUp","signOut","removeItem","useEffect","storedUser","getItem","parse","demoUser","value","Provider","fileName","_jsxFileName","lineNumber","columnNumber","_c","useAuth","_s2","context","Error","$RefreshReg$"],"sources":["/Users/guoqingwang/Dev/Web/react-resume-modifier/src/context/AuthContext.js"],"sourcesContent":["import React, { createContext, useState, useContext } from 'react';\n\nconst AuthContext = createContext(null);\n\nexport const AuthProvider = ({ children }) => {\n    const [user, setUser] = useState(null);\n    const [loading, setLoading] = useState(false);\n    const [error, setError] = useState(null);\n\n    const signIn = async (email, password) => {\n        try {\n            setLoading(true);\n            setError(null);\n            // TODO: Replace with actual API call\n            const mockUser = { id: 1, name: 'Demo User', email };\n            setUser(mockUser);\n            localStorage.setItem('user', JSON.stringify(mockUser));\n        } catch (err) {\n            setError(err.message);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const signUp = async (name, email, password) => {\n        try {\n            setLoading(true);\n            setError(null);\n            // TODO: Replace with actual API call\n            const mockUser = { id: 1, name, email };\n            setUser(mockUser);\n            localStorage.setItem('user', JSON.stringify(mockUser));\n        } catch (err) {\n            setError(err.message);\n            throw err;\n        } finally {\n            setLoading(false);\n        }\n    };\n\n    const signOut = () => {\n        setUser(null);\n        localStorage.removeItem('user');\n    };\n\n    // Auto sign in demo user on mount\n    React.useEffect(() => {\n        const storedUser = localStorage.getItem('user');\n        if (storedUser) {\n            setUser(JSON.parse(storedUser));\n        } else {\n            // Create a demo user automatically\n            const demoUser = { id: 1, name: 'Demo User', email: 'demo@example.com' };\n            setUser(demoUser);\n            localStorage.setItem('user', JSON.stringify(demoUser));\n        }\n    }, []);\n\n    const value = {\n        user,\n        loading,\n        error,\n        signIn,\n        signUp,\n        signOut\n    };\n\n    return <AuthContext.Provider value={value}>{children}</AuthContext.Provider>;\n};\n\nexport const useAuth = () => {\n    const context = useContext(AuthContext);\n    if (!context) {\n        throw new Error('useAuth must be used within an AuthProvider');\n    }\n    return context;\n};\n\nexport default AuthContext; "],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}